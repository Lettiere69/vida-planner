import datetime
import streamlit as st
import json
import os
from twilio.rest import Client

# --- PROTE√á√ÉO POR SENHA COM MEM√ìRIA DE SESS√ÉO ---
st.set_page_config(page_title="VidaPlanner", layout="wide")

if "acesso_liberado" not in st.session_state:
    st.session_state.acesso_liberado = False

if not st.session_state.acesso_liberado:
    st.markdown("""<h2 style='text-align: center;'>üîí VidaPlanner</h2>""", unsafe_allow_html=True)
    senha = st.text_input("Digite a senha para acessar:", type="password")
    senha_correta = "vidaplanner2024"
    if senha == senha_correta:
        st.session_state.acesso_liberado = True
        st.rerun()
    else:
        st.warning("Acesso negado. Digite a senha correta.")
        st.stop()

if st.session_state.acesso_liberado:
    # --- CONFIGURA√á√ïES B√ÅSICAS ---
    horario_acordar = "06:45"
    horario_trabalho_inicio = "08:00"
    horario_trabalho_fim = "18:00"
    dias_semana = ["segunda", "ter√ßa", "quarta", "quinta", "sexta", "s√°bado", "domingo"]

    # --- SALVAR PROGRESSO DE TREINOS ---
    arquivo_progresso = "progresso_treino.json"
    if os.path.exists(arquivo_progresso):
        with open(arquivo_progresso, "r") as f:
            progresso = json.load(f)
    else:
        progresso = {"treino_index": 0}

    # --- FUN√á√ÉO PARA ENVIAR WHATSAPP ---
    def enviar_agenda_whatsapp(agenda, telefone_destino):
        account_sid = "AC0548c56e5b176f60a8d5e8b79377d1ee"
        auth_token = "2e6af44567124efc45551c3e983620bf"
        client = Client(account_sid, auth_token)

        mensagem = "üìã *Sua agenda do dia:*

"
        for item in agenda:
            mensagem += f"‚Ä¢ {item}
"

        message = client.messages.create(
            from_="whatsapp:+14155238886",
            to=f"whatsapp:{telefone_destino}",
            body=mensagem
        )
        return message.sid

    # Controle de treino de corrida sequencial
    treinos_corrida = [
        "Corrida leve 3km - aquecimento de 5 min andando + corrida leve focando na respira√ß√£o. Tente manter pace abaixo de 6:30.",
        "Intervalado: aquecimento 5 min leve + 4x400m em ritmo forte (80-85%) com 200m caminhada entre os tiros. Finalize com desaquecimento leve.",
        "Rodagem cont√≠nua 4km - mantenha ritmo constante, foco na cad√™ncia e respira√ß√£o diafragm√°tica.",
        "Treino progressivo 3km - inicie leve, aumente o ritmo a cada km. √öltimo km em ritmo forte.",
        "Long√£o 5km - mantenha ritmo confort√°vel. Foco √© resist√™ncia e const√¢ncia. N√£o acelere muito.",
        "Tiros curtos: aquecimento 1km + 6x300m com intensidade alta (quase sprint), 1min de descanso parado entre cada.",
        "Corrida leve 3.5km - aten√ß√£o na postura (tronco ereto, bra√ßos relaxados), ritmo controlado.",
        "Rodagem 5km simulando prova - use o t√™nis que usaria em corrida oficial. Tente ritmo constante e supera√ß√£o leve."
    ]

    # Eventos fixos e personalizados
    eventos_fixos = {
        "quarta": ["19:00 - 00:00 | Centro Esp√≠rita"],
        "s√°bado": ["14:30 - 18:00 | Centro Esp√≠rita"]
    }
    eventos_personalizados = {
        "segunda": ["20:00 - 21:00 | Reuni√£o com mentor"],
        "domingo": ["10:00 - 11:00 | Estudo do Evangelho"]
    }

    # --- FUN√á√ÉO PRINCIPAL ---
    def gerar_agenda(dia, vai_correr):
        agenda = ["06:45 - Acordar"]
        dia = dia.lower()

        if dia in ["segunda", "ter√ßa", "quarta", "quinta", "sexta"]:
            agenda.append("08:00 - 18:00 | Trabalho")
            if dia == "quarta":
                agenda.append("18:00 - 19:00 | Chegar em casa, banho e lanche")
                agenda.extend(eventos_fixos.get("quarta", []))
            else:
                agenda.append("18:00 - 18:30 | Chegar em casa, banho e lanche")
                if vai_correr:
                    treino = treinos_corrida[progresso["treino_index"] % len(treinos_corrida)]
                    agenda.append(f"18:30 - 19:30 | Corrida - {treino}")
                    progresso["treino_index"] += 1
                else:
                    agenda.append("18:30 - 19:30 | Muscula√ß√£o")
                agenda.extend([
                    "20:00 - 21:00 | Jogo para desestressar",
                    "21:00 - 22:00 | Tempo livre ou leitura (opcional)",
                    "22:30 - Dormir üí§"
                ])

        elif dia == "s√°bado":
            agenda.append("Manh√£ livre")
            agenda.extend(eventos_fixos.get("s√°bado", []))
            if vai_correr:
                treino = treinos_corrida[progresso["treino_index"] % len(treinos_corrida)]
                agenda.append(f"18:30 - 19:30 | Corrida - {treino}")
                progresso["treino_index"] += 1
            else:
                agenda.append("18:30 - 19:30 | Muscula√ß√£o")
            agenda.extend(["20:00 - 21:30 | Lazer / Jogo", "22:30 - Dormir üí§"])

        elif dia == "domingo":
            agenda.append("Manh√£ livre / descanso")
            if vai_correr:
                treino = treinos_corrida[progresso["treino_index"] % len(treinos_corrida)]
                agenda.append(f"15:00 - 16:00 | Corrida - {treino}")
                progresso["treino_index"] += 1
            else:
                agenda.append("15:00 - 16:00 | Muscula√ß√£o ou descanso")
            agenda.extend([
                "17:00 - 18:00 | Revisar a semana / planejar",
                "19:00 - 20:00 | Tempo livre ou leitura",
                "22:00 - Dormir üí§"
            ])

        if dia in eventos_personalizados:
            agenda.extend(eventos_personalizados[dia])

        with open(arquivo_progresso, "w") as f:
            json.dump(progresso, f)

        

        return agenda

    # INTERFACE PRINCIPAL
    st.title("üìÖ VidaPlanner ‚Äì Planejador Di√°rio com IA")
    col1, col2 = st.columns(2)
    with col1:
        dia_escolhido = st.selectbox("Escolha o dia da semana:", dias_semana)
    with col2:
        vai_correr = st.radio("Atividade principal hoje:", ["Correr", "Muscula√ß√£o"]) == "Correr"

    if st.button("Gerar Agenda"):
        agenda = gerar_agenda(dia_escolhido, vai_correr)
        st.success(f"Agenda gerada para {dia_escolhido.capitalize()} üéØ")
        st.subheader("‚úçÔ∏è Edite os hor√°rios e compromissos do seu dia:")

        nova_agenda = []
        for i, item in enumerate(agenda):
            novo_item = st.text_input(label=f"üïí {item.split('|')[0].strip()} -", value=item)
            nova_agenda.append(novo_item)

        if st.button("‚úÖ Aprovar e Salvar Agenda"):
            try:
                sid = enviar_agenda_whatsapp(nova_agenda, "+5586988248770")
                st.code(f"SID da mensagem: {sid}", language="python")
                st.success("üì§ Agenda enviada para seu WhatsApp com sucesso!")
            except Exception as e:
                st.error(f"Erro ao enviar WhatsApp: {e}")
            nome_arquivo = f"agenda_{dia_escolhido}.txt"
            with open(nome_arquivo, "w", encoding="utf-8") as f:
                f.write(f"Agenda para {dia_escolhido.capitalize()}\n")
                f.write("=" * 30 + "\n")
                for item in nova_agenda:
                    f.write(f"{item}\n")
            st.success(f"Agenda salva como '{nome_arquivo}'")
